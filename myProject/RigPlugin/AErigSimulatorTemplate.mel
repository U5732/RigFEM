//
//  Procedure Name:
//	AEmatlab
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 
global proc string getFirstShape(string $transformName)
{
	string $shapes[]    = `listRelatives -shapes $transformName`;
	return $shapes[0];
}

global proc buildOrUpdateCollisionData(string $nodeName)
{	
	string $ptcl      = `getAttr ($nodeName + ".collisionParticle")`;
	string $mesh      = `getAttr ($nodeName + ".collisionMesh")`;
	if(`size $ptcl` == 0 || `size $mesh` == 0)
	{
		confirmDialog -title "Error" -message "Please enter particle and mesh name." -button "OK";
		return;
	}
	// if object not exist, create one
	if(`objExists $ptcl` == 0)
	{	
		nParticle -name $ptcl;
	}
	
	// add attribute 
	string $ptclShape = getFirstShape($ptcl);
	if(`attributeExists collisionWorldForce $ptclShape` == 0)
	{
		addAttr -ln collisionWorldForce -dt vectorArray $ptclShape;
	}	
	if(`attributeExists collisionWorldForce0 $ptclShape` == 0)
	{
		addAttr -ln collisionWorldForce0 -dt vectorArray $ptclShape;
	}	
	if(`attributeExists collisionGeometryIndex $ptclShape` == 0)
	{
		addAttr -ln collisionGeometryIndex -dt doubleArray $ptclShape;
	}
	if(`attributeExists collisionGeometryIndex0 $ptclShape` == 0)
	{
		addAttr -ln collisionGeometryIndex0 -dt doubleArray $ptclShape;
	}
	
	// connect attribute
	if(`isConnected ($ptclShape+".collisionGeometryIndex") ($nodeName + ".surfaceForceBitmap[0]")` == 0)
	{
		connectAttr -f ($ptclShape+".collisionGeometryIndex") ($nodeName + ".surfaceForceBitmap[0]");
	}
	if(`isConnected ($ptclShape+".collisionWorldForce") ($nodeName + ".surfaceForce[0]")` == 0)
	{
		connectAttr -f ($ptclShape+".collisionWorldForce") ($nodeName + ".surfaceForce[0]");
	}
	
	// add goal
	goal -w 1 -utr 0 -g $mesh  $ptcl;
}

global proc initSimulator(string $nodeName)
{	
	// execute
	rigSimulate -init -name $nodeName;
	
	// reset particle shape
	string $ptcl      = `getAttr ($nodeName + ".collisionParticle")`;
	string $ptclShape = "";
	if(`size($ptcl)` != 0)
	{
		$ptclShape = getFirstShape($ptcl);
	}
	string $mesh      = `getAttr ($nodeName + ".collisionMesh")`;
	int    $nPnt      = `rigSimulate -numSurfacePnt -name $nodeName`;
	float $pnt[3] = {0,0,0};
	if(`size($ptclShape)` != 0 && `objExists $ptclShape`)
	{
		clearParticleStartState $ptclShape; 
		currentTime 1;
		
		// add particles
		int $frame = `currentTime -q`;
		int $i;
		for($i = 0; $i < $nPnt; ++$i)
		{        
			if ( `size($mesh)` != 0)
			{			
				$pnt = `xform -q -worldSpace -t ($mesh + ".vtx[" + $i + "]")`;
			}
			emit -object $ptclShape -pos $pnt[0] $pnt[1] $pnt[2];
		}
		
		// go back to current frame and set it as initial state
		currentTime $frame;
		saveInitialState $ptclShape;
	}
	refresh -f;
}
// type: simulation type 
// 0		dynamic simulation
// 1		static simulation
// 2		static simulation with general force
global proc execSimulator(string $nodeName, int $type)
{
	int  $length = `intSliderGrp   -query -value simLengthSlider`;
	
	// init progress bar
	global string $gMainProgressBar;
    progressBar -edit
        -beginProgress
        -isInterruptable true
        -status "Simulating... "
        -maxValue $length
        $gMainProgressBar;
		
	int  $begTime = `currentTime -q`;
	int  $t;
	$startSecond = `timerX`;
	for ($t = $begTime; $t < $begTime + $length; $t++)
	{	
		// step progress bar
        if(`progressBar -query -isCancelled $gMainProgressBar`)
            break;
		print("\n\ncurrent Frame:"+ $t + "\n");
        progressBar -edit -step 1 $gMainProgressBar;
			
		int $res;
		$frameStartSecond = `timerX`;
		switch($type)
		{
		case 0:
			$res = `rigSimulate -step -name $nodeName`;
			break;
		case 1:
			$res = `rigSimulate -stepStatic -name $nodeName`;
			break;
		case 2:
			$res = `rigSimulate -stepEleGF -name $nodeName`;
		}
		$frameTotalSecond = `timerX -startTime $frameStartSecond`;
		print ("Computation Time: "+$frameTotalSecond+"s\n");
		
		if($res == 0)
			break;
				
		currentTime ($t+1);
	}
	// code that is being timed
	$totalSecond = `timerX -startTime $startSecond`;
	$totalFrame= $t - $begTime;
	if ($totalFrame != 0)
	{
		float $timeRate = $totalSecond / float($totalFrame);
		print ("Total Time: "+$totalSecond+"s\n");
		print ("Average Time: "+$timeRate+"s\n");
	}
	
	// delete progress bar
    progressBar -edit  -endProgress $gMainProgressBar;
}
global proc saveSimulationData(string $nodeName)
{
	string $filePath = `getAttr ($nodeName+".resultPath")`;
	//`fileDialog -m 1`;
	int $res = `rigSimulate -name $nodeName -save $filePath`;
}

// simulation buttons
global proc initSimulatorControl(string $attrName)
{
	string $nodeName = `plugNode $attrName`;
	setUITemplate -pst "attributeEditorTemplate";
		button -label "Initialize" -c ("initSimulator " + $nodeName) initButton;
		
		intSliderGrp 	-label "Simulation Length" -field true
						-minValue 1 -maxValue 100
						-fieldMinValue  1 -fieldMaxValue  10000
						-value 10
						simLengthSlider;
		button -label "Simulate" -c ("execSimulator " + $nodeName + " 0") simButton;
		button -label "Static Simulate" -c ("execSimulator " + $nodeName + " 1") staticSimButton;
		button -label "Save Simulation Result" -c ("saveSimulationData " + $nodeName) saveButton;
	setUITemplate -ppt;
}

global proc modifySimulatorControl(string $attrName)
{
	string $nodeName = `plugNode $attrName`;
	button -e -c ("initSimulator " + $nodeName) initButton;	
	button -e -c ("execSimulator " + $nodeName + " 0") simButton;
	button -e -c ("execSimulator " + $nodeName + " 1") staticSimButton;
	button -e -c ("saveSimulationData " + $nodeName) saveButton;
}
// collision buttons
global proc initCollisionControl(string $attrName)
{
	string $nodeName = `plugNode $attrName`;	
	setUITemplate -pst "attributeEditorTemplate";		
		button -label "Build or Update Collision Data" -c ("buildOrUpdateCollisionData " + $nodeName) collisionButton;
	setUITemplate -ppt;
}
global proc modifyCollisionControl(string $attrName)
{
	string $nodeName = `plugNode $attrName`;
	button -e -c ("buildOrUpdateCollisionData " + $nodeName) collisionButton;
}

// test gradient and hessian
global proc testGradient(string $nodeName)
{	
	float $dN = `floatSliderGrp -query -value dNSlider`;
	float $dP = `floatSliderGrp -query -value dPSlider`;
	rigSimulate -gradient $dN $dP -name $nodeName;
}
global proc testHessian(string $nodeName)
{	
	float $dN = `floatSliderGrp -query -value dNSlider`;
	float $dP = `floatSliderGrp -query -value dPSlider`;
	rigSimulate -hessian $dN $dP -name $nodeName;
}

global proc initTestGH(string $attrName)
{
	string $nodeName = `plugNode $attrName`;	
	setUITemplate -pst "attributeEditorTemplate";		
		floatSliderGrp 	-label "Internal Point Increment" -field true
					    -minValue 0.0 -maxValue 1
					    -fieldMinValue 0 -fieldMaxValue 1.7e308
					    -value 0.1  dNSlider;
								
		floatSliderGrp 	-label "Parameter Increment" -field true
					    -minValue 0.0 -maxValue 1
					    -fieldMinValue 0 -fieldMaxValue 1.7e308
					    -value 0.1  dPSlider;
						
		button -label "Test Gradient" -c ("testGradient " + $nodeName) testGradientButton;
		button -label "Test Hessian"  -c ("testGradient " + $nodeName) testHessianButton;		
	setUITemplate -ppt;
}

global proc modifyTestGH(string $attrName)
{
	string $nodeName = `plugNode $attrName`;	
	button -e -c ("testGradient " + $nodeName) testGradientButton;
	button -e -c ("testHessian "  + $nodeName) testHessianButton;
}

// Adaptive Material
global proc saveGeneralForceData(string $nodeName)
{
	string $filePath = `getAttr ($nodeName+".generalForceResultPath")`;
	int $res = `rigSimulate -name $nodeName -saveGF $filePath`;
}

global proc initAdaptiveMaterial(string $attrName)
{
	string $nodeName = `plugNode $attrName`;	
	setUITemplate -pst "attributeEditorTemplate";		
		button -label "Simulate And Record General Force" -c ("execSimulator " + $nodeName + " 2") simWithGFButton;
		button -label "Save General Force Data" -c ("saveGeneralForceData " + $nodeName) saveGFButton;
		button -label "Load Element Material" -c ("rigSimulate -name " + $nodeName + " -loadEleMat") loadMatButton;
		button -label "Reset Element Material" -c ("rigSimulate -name " + $nodeName + " -resetEleMat") resetMatButton;
	setUITemplate -ppt;
}

global proc modifyAdaptiveMaterial(string $attrName)
{
	string $nodeName = `plugNode $attrName`;
	button -e -c ("execSimulator " + $nodeName + " 2") simWithGFButton;
	button -e -c ("saveGeneralForceData " + $nodeName) saveGFButton;
	button -e -c ("rigSimulate -name " + $nodeName + " -loadEleMat") loadMatButton;
	button -e -c ("rigSimulate -name " + $nodeName + " -resetEleMat") resetMatButton;
}


// main
global proc AErigSimulatorTemplate(string $nodeName)
{
	editorTemplate -beginScrollLayout;
		editorTemplate -beginLayout "Tet Mesh" -collapse false;
			editorTemplate -addControl "tetEdgeRatio";
			editorTemplate -addControl "tetMaxVolume";
			editorTemplate -addSeparator;
			editorTemplate -addControl "time";
			editorTemplate -label "Param. From" -addControl "displayType";
			editorTemplate -addControl "meshTransform";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Display" -collapse false;
			editorTemplate -addControl "displayFemMesh";
			editorTemplate -addControl "displayVertex";
			editorTemplate -addControl "displayEdge";
			editorTemplate -addControl "displayBoundingBox";
			editorTemplate -label "Ext. Force Display Length" -addControl "fieldForceShowLength";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Material" -collapse false;
			editorTemplate -addControl "youngModulus";
			editorTemplate -addControl "nu";
			editorTemplate -addControl "density";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Solver" -collapse false;
			editorTemplate -addControl "stepTime";
			editorTemplate -addControl "derivativeStep";
			
			editorTemplate -addSeparator;
			editorTemplate -addControl "inverseGradTolerance";
			editorTemplate -label "inverse Newton Step Tolerance" -addControl "inverseStepTolerance";
			editorTemplate -label "inverse CG. Step Tolerance" -addControl "inverseStepToleranceOfCG";
			editorTemplate -label "max Newton Iteration" -addControl "maxIteration";
			editorTemplate -label "max CG. Iteration" -addControl "maxIterationOfCG";			
			editorTemplate -addControl "maxParamStepEachIteration";
						
			editorTemplate -addSeparator;
			editorTemplate -addControl "savePath";
			editorTemplate -addControl "simulationType";
			editorTemplate -addControl "weightPath";
			editorTemplate -addControl "resultPath";
			editorTemplate -callCustom "initSimulatorControl" "modifySimulatorControl" "noAttr";	
			
			editorTemplate -beginLayout "Solve Adaptive Material" -collapse true;
				editorTemplate -addControl "generalForceResultPath";
				editorTemplate -addControl "materialPath";
				editorTemplate -addControl "displayMaterial";
				editorTemplate -addControl "minColorFactor";
				editorTemplate -addControl "maxColorFactor";
				editorTemplate -addControl "cutAxis";
				editorTemplate -addControl "cutPlaneRatio";
				editorTemplate -callCustom "initAdaptiveMaterial" "modifyAdaptiveMaterial" "noAttr";
			editorTemplate -endLayout;
			
			editorTemplate -beginLayout "Test Solver" -collapse true;
				editorTemplate -callCustom "initTestGH" "modifyTestGH" "noAttr";	
			editorTemplate -endLayout;
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Rig Parameter" -collapse true;
			editorTemplate -addControl "rigInitParameter";
			editorTemplate -addControl "inputForce";
		editorTemplate -endLayout;
					
		editorTemplate -beginLayout "Collision" -collapse true;
			editorTemplate -label "Proxy NParticle Name" -addControl "collisionParticle";
			editorTemplate -label "Mesh Name"            -addControl "collisionMesh";
			editorTemplate -callCustom "initCollisionControl" "modifyCollisionControl" "noAttr";	
			editorTemplate -addControl "surfaceForce";
			editorTemplate -addControl "surfaceForceFactor";
			editorTemplate -addControl "surfaceForceBitmap";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Rig Control" -collapse true;
			editorTemplate -addControl "controlType";
			editorTemplate -addControl "targetParam";
			editorTemplate -addControl "proportionalGain";
			editorTemplate -addControl "derivativeGainRatio";
		editorTemplate -endLayout;
		
		editorTemplate -suppress "fieldData";
		editorTemplate -suppress "riggedMesh";
		
		editorTemplate -beginLayout (uiRes("m_AElocatorTemplate.kLocatorAttributes")) -collapse true;
			AElocatorCommon $nodeName;
		editorTemplate -endLayout;

		AEgeometryShapeTemplate $nodeName;

		editorTemplate -addExtraControls;	
	editorTemplate -endScrollLayout;
}